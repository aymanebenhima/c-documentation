import{_ as s,c as i,o as a,a2 as e}from"./chunks/framework.BThh_NHy.js";const g=JSON.parse('{"title":"Sortie en C : Afficher des Informations","description":"","frontmatter":{},"headers":[],"relativePath":"fr/output.md","filePath":"fr/output.md"}'),n={name:"fr/output.md"},t=e(`<h1 id="sortie-en-c-afficher-des-informations" tabindex="-1">Sortie en C : Afficher des Informations <a class="header-anchor" href="#sortie-en-c-afficher-des-informations" aria-label="Permalink to &quot;Sortie en C : Afficher des Informations&quot;">​</a></h1><p>En programmation C, la sortie fait référence à l&#39;affichage d&#39;informations à l&#39;utilisateur. La façon la plus courante d&#39;afficher une sortie est d&#39;utiliser la fonction <code>printf</code>. Cette fonction imprime du texte et les valeurs des variables sur la console (le terminal ou l&#39;invite de commande). Explorons comment utiliser <code>printf</code> pour une sortie de base.</p><h2 id="impression-a-la-console-la-fonction-printf" tabindex="-1">Impression à la Console : La Fonction <code>printf</code> <a class="header-anchor" href="#impression-a-la-console-la-fonction-printf" aria-label="Permalink to &quot;Impression à la Console : La Fonction \`printf\`&quot;">​</a></h2><p>La fonction <code>printf</code> vous permet d&#39;imprimer du texte et des données sur la console. Voici la syntaxe de base :</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;chaîne de format&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arguments);</span></span></code></pre></div><ul><li><strong>chaîne de format</strong> : Une chaîne qui détermine comment la sortie sera formatée.</li><li><strong>arguments</strong> : Valeurs à afficher, correspondant aux spécificateurs de format dans la chaîne de format.</li></ul><h3 id="exemple" tabindex="-1">Exemple <a class="header-anchor" href="#exemple" aria-label="Permalink to &quot;Exemple&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> grade </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Âge : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // Imprime un entier</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Taille : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%.1f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mètres</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, height);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Imprime un nombre à virgule flottante</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Note : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%c\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, grade);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // Imprime un caractère</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="specificateurs-de-format" tabindex="-1">Spécificateurs de Format <a class="header-anchor" href="#specificateurs-de-format" aria-label="Permalink to &quot;Spécificateurs de Format&quot;">​</a></h3><ul><li><code>%d</code> : Affiche un entier.</li><li><code>%f</code> : Affiche un nombre à virgule flottante.</li><li><code>%c</code> : Affiche un seul caractère.</li><li><code>%s</code> : Affiche une chaîne de caractères.</li></ul><h3 id="exemple-1" tabindex="-1">Exemple <a class="header-anchor" href="#exemple-1" aria-label="Permalink to &quot;Exemple&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Nombre : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, number);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Imprime le nombre</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> letter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;B&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Lettre : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%c\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, letter);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Imprime la lettre</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="imprimer-des-chaines-et-des-caracteres-speciaux" tabindex="-1">Imprimer des Chaînes et des Caractères Spéciaux <a class="header-anchor" href="#imprimer-des-chaines-et-des-caracteres-speciaux" aria-label="Permalink to &quot;Imprimer des Chaînes et des Caractères Spéciaux&quot;">​</a></h2><p>Vous pouvez également imprimer des chaînes et utiliser des caractères spéciaux dans votre sortie. Les caractères spéciaux sont représentés par des séquences d&#39;échappement :</p><ul><li><code>\\n</code> : Nouvelle ligne (passe à la ligne suivante)</li><li><code>\\t</code> : Tabulation (ajoute un espace horizontal)</li><li><code>\\\\</code> : Barre oblique inverse (imprime une barre oblique inverse)</li><li><code>\\&quot;</code> : Guillemet double (imprime un guillemet double)</li></ul><h3 id="exemple-2" tabindex="-1">Exemple <a class="header-anchor" href="#exemple-2" aria-label="Permalink to &quot;Exemple&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bonjour, le monde !</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // Imprime une nouvelle ligne</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Nom :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Alice</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Imprime une tabulation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Citation : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Être ou ne pas être</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Imprime un guillemet double</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="exercice-pratique" tabindex="-1">Exercice Pratique <a class="header-anchor" href="#exercice-pratique" aria-label="Permalink to &quot;Exercice Pratique&quot;">​</a></h2><p>Créez un programme simple qui utilise <code>printf</code> pour afficher différents types de données, tels que des entiers, des nombres à virgule flottante et des caractères. Expérimentez avec les spécificateurs de format et les séquences d&#39;échappement pour voir comment ils affectent la sortie.</p><hr><p>Les fonctions de sortie sont essentielles pour interagir avec les utilisateurs et afficher des données dans vos programmes. Elles fournissent les moyens d&#39;afficher efficacement les résultats et les commentaires. Ensuite, plongeons dans le chapitre <a href="./comments.html">Commentaires</a> pour apprendre à ajouter des notes et des explications significatives à votre code.</p>`,21),l=[t];function h(p,r,k,d,o,c){return a(),i("div",null,l)}const u=s(n,[["render",h]]);export{g as __pageData,u as default};
