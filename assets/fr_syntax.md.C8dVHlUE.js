import{_ as s,c as i,o as e,a2 as a}from"./chunks/framework.BThh_NHy.js";const g=JSON.parse('{"title":"Syntaxe de Base en C : Les Blocs de Construction","description":"","frontmatter":{},"headers":[],"relativePath":"fr/syntax.md","filePath":"fr/syntax.md"}'),n={name:"fr/syntax.md"},t=a(`<h1 id="syntaxe-de-base-en-c-les-blocs-de-construction" tabindex="-1">Syntaxe de Base en C : Les Blocs de Construction <a class="header-anchor" href="#syntaxe-de-base-en-c-les-blocs-de-construction" aria-label="Permalink to &quot;Syntaxe de Base en C : Les Blocs de Construction&quot;">​</a></h1><p>Comprendre la syntaxe de base du C est essentiel pour écrire des programmes corrects et fonctionnels. La syntaxe C définit les règles et la structure de l&#39;écriture de code pour qu&#39;il soit compris par le compilateur. Décortiquons les éléments fondamentaux de la syntaxe C pour vous aider à démarrer.</p><h2 id="structure-de-base-d-un-programme-c" tabindex="-1">Structure de Base d&#39;un Programme C <a class="header-anchor" href="#structure-de-base-d-un-programme-c" aria-label="Permalink to &quot;Structure de Base d&#39;un Programme C&quot;">​</a></h2><p>Un programme C se compose généralement de plusieurs parties clés :</p><h3 id="_1-directives-du-preprocesseur" tabindex="-1">1. Directives du Préprocesseur <a class="header-anchor" href="#_1-directives-du-preprocesseur" aria-label="Permalink to &quot;1. Directives du Préprocesseur&quot;">​</a></h3><p>Les directives du préprocesseur sont des lignes incluses au début de votre code qui commencent par <code>#</code>. Elles fournissent des instructions au compilateur avant le début de la compilation réelle.</p><ul><li><code>#include &lt;stdio.h&gt;</code> : Inclut la bibliothèque standard d&#39;entrée-sortie, nécessaire pour utiliser des fonctions comme <code>printf</code>.</li></ul><h3 id="exemple" tabindex="-1">Exemple <a class="header-anchor" href="#exemple" aria-label="Permalink to &quot;Exemple&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Inclure la bibliothèque standard I/O</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Le code va ici</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Instruction de retour</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-la-fonction-main" tabindex="-1">2. La Fonction <code>main</code> <a class="header-anchor" href="#_2-la-fonction-main" aria-label="Permalink to &quot;2. La Fonction \`main\`&quot;">​</a></h3><p>Chaque programme C doit avoir une fonction <code>main</code>. C&#39;est le point d&#39;entrée du programme où l&#39;exécution commence. La fonction <code>main</code> doit retourner une valeur entière, généralement <code>0</code>, pour indiquer une fin réussie.</p><h3 id="exemple-1" tabindex="-1">Exemple <a class="header-anchor" href="#exemple-1" aria-label="Permalink to &quot;Exemple&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Votre code ici</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Indique une exécution réussie</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_3-instructions-et-points-virgules" tabindex="-1">3. Instructions et Points-virgules <a class="header-anchor" href="#_3-instructions-et-points-virgules" aria-label="Permalink to &quot;3. Instructions et Points-virgules&quot;">​</a></h3><p>Les instructions sont des commandes individuelles en C et doivent se terminer par un point-virgule (<code>;</code>). Chaque instruction est exécutée séquentiellement.</p><h3 id="exemple-2" tabindex="-1">Exemple <a class="header-anchor" href="#exemple-2" aria-label="Permalink to &quot;Exemple&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Déclaration et initialisation de variable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Valeur de a : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Instruction d&#39;impression</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_4-blocs-et-accolades" tabindex="-1">4. Blocs et Accolades <a class="header-anchor" href="#_4-blocs-et-accolades" aria-label="Permalink to &quot;4. Blocs et Accolades&quot;">​</a></h3><p>Les blocs de code sont enfermés dans des accolades <code>{}</code>. Les blocs sont utilisés pour regrouper des instructions, par exemple dans les fonctions et les structures de contrôle.</p><h3 id="exemple-3" tabindex="-1">Exemple <a class="header-anchor" href="#exemple-3" aria-label="Permalink to &quot;Exemple&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Ceci est un bloc</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Valeur de x : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_5-commentaires" tabindex="-1">5. Commentaires <a class="header-anchor" href="#_5-commentaires" aria-label="Permalink to &quot;5. Commentaires&quot;">​</a></h3><p>Les commentaires sont utilisés pour expliquer le code et sont ignorés par le compilateur. Ils peuvent être sur une seule ligne (<code>//</code>) ou sur plusieurs lignes (<code>/* ... */</code>).</p><h3 id="exemple-4" tabindex="-1">Exemple <a class="header-anchor" href="#exemple-4" aria-label="Permalink to &quot;Exemple&quot;">​</a></h3><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Commentaire sur une ligne</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* Commentaire sur plusieurs lignes */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Valeur de y : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="points-cles" tabindex="-1">Points Clés <a class="header-anchor" href="#points-cles" aria-label="Permalink to &quot;Points Clés&quot;">​</a></h2><ul><li><strong>Directives du Préprocesseur</strong> : Commencent par <code>#</code> et fournissent des instructions avant la compilation.</li><li><strong>Fonction <code>main</code></strong> : Le point de départ du programme, doit retourner un entier.</li><li><strong>Instructions</strong> : Se terminent par un point-virgule.</li><li><strong>Blocs</strong> : Groupent des instructions à l&#39;aide d&#39;accolades <code>{}</code>.</li><li><strong>Commentaires</strong> : Utilisés pour les explications, ignorés par le compilateur.</li></ul><h2 id="exercice-pratique" tabindex="-1">Exercice Pratique <a class="header-anchor" href="#exercice-pratique" aria-label="Permalink to &quot;Exercice Pratique&quot;">​</a></h2><p>Créez un programme C simple qui inclut une fonction <code>main</code>, quelques instructions, ainsi que des commentaires sur une ligne et sur plusieurs lignes. Assurez-vous que votre programme compile et s&#39;exécute correctement, affichant une sortie sur la console.</p><hr><p>Maîtriser la syntaxe de base est la première étape pour écrire des programmes C fonctionnels. Ensuite, plongeons dans <a href="./output.html">Sortie</a> pour apprendre à imprimer des éléments dans vos programmes.</p>`,31),l=[t];function r(p,h,o,d,c,k){return e(),i("div",null,l)}const m=s(n,[["render",r]]);export{g as __pageData,m as default};
